namespace rooibos
  ' /**
  '  * @module TestSuite
  '  * @description All brs files that include `'@TestSuite` annotations automatically extend the TestSuite.
  '  * The base test suite contains all of the assertions, and utility methods required to write our tests, as well as being responsible for tracking the state of the tests and groups.
  '  */
  class TestGroup
    'test state
    name = "Unnamed Suite"

    testSuite = invalid
    setupFunctionName = invalid
    tearDownFunctionName = invalid
    beforeEachFunctionName = invalid
    afterEachFunctionName = invalid
    isSolo = false
    isLegacy = false
    isIgnored = false
    stats = invalid
    scene = invalid
    lineNumber = 00
    top = invalid
    valid = false
    hasFailures = false
    isNodeTest = false
    nodeName = invalid
    testsData = invalid
    tests = []

    function new(testSuite, data)
      m.testSuite = testSuite
      m.name = data.name
      m.valid = data.valid
      m.hasFailures = testSuite.hasFailures
      m.isSolo = data.isSolo
      m.isIgnored = data.isIgnored
      m.testsData = data.testCases
      m.isNodeTest = false
      m.nodeName = invalid
      m.setupFunctionName = data.setupFunctionName
      m.tearDownFunctionName = data.tearDownFunctionName
      m.beforeEachFunctionName = data.beforeEachFunctionName
      m.afterEachFunctionName = data.afterEachFunctionName
      m.lineNumber = data.lineNumber

      'bs:disable-next-line
      m.global = testSuite.global
      m.top = testSuite.top
      m.scene = testSuite.scene
      m.stats = new rooibos.Stats()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ running
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function run()
      isOk = m.runSuiteFunction(m.setupFunctionName, "setup")

      if isOk
        for each testData in m.testsData
          test = new rooibos.Test(m, testData)
          m.tests.push(test)

          isOk = m.runSuiteFunction(m.beforeEachFunctionName, "beforeEach", test)

          if isOk
            m.testSuite.runTest(test)
          end if

          m.runSuiteFunction(m.afterEachFunctionName, "afterEach", test)

          m.stats.appendTestResult(test.result)

          if m.stats.hasFailures and m.testSuite.isFailingFast
            ? "Terminating group due to failed test"
            exit for
          end if
        end for
      else
        ? "ERROR running test setup function"
      end if
      m.runSuiteFunction(m.tearDownFunctionName, "tearDown")
    end function

    private function runSuiteFunction(methodName, defaultMethodName, test = invalid)

      if methodName = invalid or methodName = ""
        methodName = defaultMethodName
      end if
      if m.testSuite.catchCrashes and not m.testSuite.noCatch and not (test <> invalid and test.noCatch)
        try
          m.testSuite[methodName]()
          return true
        catch error
          if test <> invalid
            'bs:disable-next-line
            test.result.crash("function " + methodName + "crashed!", error)
          end if
        end try
      else
        m.testSuite[methodName]()
        return true
      end if

      'bs:disable-next-line
      return false
    end function

  end class
end namespace